#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# Check for Cisco Small Business Switch FANs.
# We probe sysDescr.0 (default, probably already cached) 
# and CISCOSB-Physicaldescription-MIB::rlPhdUnitGenParamManufacturer.1 for "cisco",
# as this MIB is available on SB Switches (like SG300 Series), only.
# The fans itself are on the following OIDs:
# .1.3.6.1.4.1.9.6.1.101.53.15.1.4.1 = FAN1 status
# .1.3.6.1.4.1.9.6.1.101.53.15.1.5.1 = FAN2 status
# .1.3.6.1.4.1.9.6.1.101.53.15.1.6.1 = FAN3 status
# .1.3.6.1.4.1.9.6.1.101.53.15.1.7.1 = FAN4 status
# .1.3.6.1.4.1.9.6.1.101.53.15.1.8.1 = FAN5 status

cisco_fan_states = ('', 'normal', 'warning', 'critical',
                    'shutdown', 'notPresent', 'notFunctioning')

def inventory_cisco_sb_fan(info):
    return [ (line[0], None) for line in info if line[1] != '5' ]

def check_cisco_sb_fan(item, params, info):
    for statustext, state, oid_end in info:
        if cisco_sensor_item(statustext, oid_end) == item:
            state = int(line[1])
            if state == 1:
                return (0, "State is: %s (%d)" % (cisco_fan_states[state], state))
            elif state == 2:
                return (1, "State is %s (%d)" % (cisco_fan_states[state], state))
            else:
                return (2, "State is %s (%d)" % (cisco_fan_states[state], state))
    return (3, "item not found in snmp data")


check_info["cisco_sb_fan"] = {
    'check_function':          check_cisco_sb_fan,
    'inventory_function':      inventory_cisco_sb_fan,
    'service_description':     'FAN %s',
    'snmp_info':               ('.1.3.6.1.4.1.9.6.1.101.53.15.1.', [OID_END, '4', '5', '6', '7', '8']),
    'snmp_scan_function': \
        lambda oid: "cisco" in oid(".1.3.6.1.2.1.1.1.0").lower() and \
        "cisco" in oid(".1.3.6.1.4.1.9.6.1.101.53.14.1.10.1").lower(),
    "includes":                ['cisco_sensor_item.include'],
}
